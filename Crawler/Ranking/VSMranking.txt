Algorithm VSMranking
----------------------------------------------------------------------
IN:  - keywordsId : list of keywords id's in the query
     - docMatches : list of docMatch, each element containing : the docId and a list 'matches' containing Match objects. A match object contains a wordId its term frequency tf.
     - vocSize : size of the vocabulary set
OUT: - results : an list of Result objects [docId,sim] , sim being the 			 similarity
----------------------------------------------------------------------
CREATE LIST results
CREATE _SPARSE_ VECTOR docv[SIZE: vocSize ]
CREATE _SPARSE_ VECTOR queryv[SIZE: vocSize ]

FOR ALL IN queryv : queryv = 0
FOR kwId IN keywordsId :	// building the query vector
	queryv[kwId] = 1

FOR ALL IN docv : docv = 0
FOR doc IN docMatches :
	currResult = NEW OBJECT Result
	currResult.docId = doc.docId
	FOR match IN doc.matches :
		docv[match.wordId] = match.tf
	currResult.sim = cosine(queryv,docv)
	results.add(result)
	

RETURN results
